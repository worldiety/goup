# The name is used to setup a custom workspace and tools.
# You should not invoke parallel builds for the same project
name: MySuperProject

# set custom environment variables, which are always applied into the executing environment, just
# like they have been defined before invoking GoUp
variables:
  TEST: "HELLO WORLD"
  TEST2: "HELLO WORLD"

# before_script is executing the following commands before the actual build starts. You can use it, to e.g. work around
# authentication problems with go get and git
before_script:
  - git config --global url."https://user:password@gitlab.mycompany.com/".insteadOf "https://gitlab.mycompany.com/"



# The build section defines what and how goup should work
build:
  # We want a gomobile build, e.g. for ios or android
  gomobile:

    # the toolchain section is required to setup a stable gomobile building experience
    toolchain:
      # which go version?
      go: 1.12.4
      # which android ndk version?
      ndk: r19c
      # which android sdk version?
      sdk: 4333796
      # which java version?
      jdk: 8u212b03
      # which gomobile version?
      gomobile: wdy-v0.0.1

    # The ios section defines how our iOS library is build. This only works on MacOS with XCode installed
    ios:
      # The gomobile -prefix flag
      prefix: Myproject

      # The gomobile -o flag, this will be a folder
      out: ./appIOS/iosApp/Myproject.framework

      # The gomobile -bundleid flag sets the bundle ID to use with the app.
      bundleid:

      # The gomobile -ldflags flag
      ldflags:


    # The android section defines how our android build is executed
    android:
      # The gomobile -javapkg flag prefixes the generated packages
      javapkg: com.mycompany.myproject

      # The gomobile -o flag, this will be an android archive file. You should only ever use
      # a single go library in your app. Otherwise there may be some technical issues and
      # it also wastes a lot of storage and memory resources in your app.
      out: ./appAndroid/libGo/libs/fatLib.aar

      # The gomobile -ldflags flag
      ldflags:


    # The modules section defines a list of all local or remote go modules, which should be included in the build.
    # You can have more than one, but probably you only need a single one and want to use
    # real go mod dependencies instead.
    modules:
      - ./libGo/mycompany/myproject

    # The export section defines all exported packages which are passed to gobind by gomobile.
    # Gomobile does not generate transitives exports, so you need to declare all
    # packages containing types and methods which you want to have bindings for.
    # Be careful with name conflicts, because the last part of the package will be used
    # to scope the types.
    export:
      # contains handsome wrappers to allow passing unsupported types (interfaces, maps, slices)
      # through gomobile. In our case pkgb wants to export those types.
      # our actual local packages
      - mycompany/myproject
      - mycompany/myproject/pkga
      - mycompany/myproject/pkgb
      - github.com/worldiety/std




